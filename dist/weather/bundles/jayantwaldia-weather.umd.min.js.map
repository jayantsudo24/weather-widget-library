{"version":3,"sources":["ng://@jayantwaldia/weather/lib/weather.service.ts","ng://@jayantwaldia/weather/lib/weather.component.ts","ng://@jayantwaldia/weather/lib/weather.module.ts"],"names":["WeatherService","_http","this","apiURL","timeApiURL","userdetails","appID","prototype","getWeather","city","unit","get","pipe","catchError","handlError","getLocalTime","lat","long","error","throwError","message","Injectable","args","providedIn","HttpClient","WeatherComponent","_ws","errText","renderWeather","_this","weathersubscription","location","subscribe","data","temp","Math","round","main","desc","weather","description","weatherico","icon","name","country","sys","coord","lon","dt","time","ngOnChanges","changes","unsubscribe","Component","selector","template","encapsulation","ViewEncapsulation","ShadowDom","Input","WeatherModule","NgModule","declarations","imports","HttpClientModule","CommonModule","exports"],"mappings":"qiBAAA,IAAAA,EAAA,WAcE,SAAAA,EACUC,GAAAC,KAAAD,MAAAA,EANHC,KAAAC,OAAS,qDACTD,KAAAE,WAAa,uDACbF,KAAAG,YAAc,sCAEdH,KAAAI,MAAQ,iDAOfN,EAAAO,UAAAC,WAAA,SAAWC,EAAMC,GACd,OAAOR,KAAKD,MAAMU,IAAST,KAAKC,OAAOM,EAAKP,KAAKI,MAAM,UAAUI,GAAME,KAAKC,EAAAA,WAAWX,KAAKY,cAE/Fd,EAAAO,UAAAQ,aAAA,SAAaC,EAAKC,GACf,OAAOf,KAAKD,MAAMU,IAAST,KAAKE,WAAW,OAAOY,EAAI,QAAQC,EAAKf,KAAKG,cAE3EL,EAAAO,UAAAO,WAAA,SAAWI,GACT,OAAOC,EAAAA,WAAWD,EAAMA,MAAME,8BAtBjCC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALLC,EAAAA,+IADT,GCAAC,EAAA,WAoBE,SAAAA,EACSC,GAAAxB,KAAAwB,IAAAA,EATFxB,KAAAyB,QAAkB,GA4C3B,OAhCEF,EAAAlB,UAAAqB,cAAA,WAAA,IAAAC,EAAA3B,KACEA,KAAK4B,oBAAsB5B,KAAKwB,IAAIlB,WAAWN,KAAK6B,SAAU7B,KAAKQ,MAAMsB,UAAS,SAAEC,GAClFJ,EAAKF,QAAU,GACfE,EAAKK,KAAOC,KAAKC,MAAMH,EAAKI,KAAKH,MACjCL,EAAKS,KAAOL,EAAKM,QAAQ,GAAGC,YAC5BX,EAAKY,WAAa,mCAAmCR,EAAKM,QAAQ,GAAGG,KAAK,OAC1Eb,EAAKpB,KAAOwB,EAAKU,KACjBd,EAAKe,QAAUX,EAAKY,IAAID,QACxBf,EAAKd,aAAakB,EAAKa,MAAM9B,IAAKiB,EAAKa,MAAMC,MAE9C,SAAE7B,GACDW,EAAKF,QAAUT,KAInBO,EAAAlB,UAAAQ,aAAA,SAAaC,EAAKC,GAAlB,IAAAY,EAAA3B,KACEA,KAAKwB,IAAIX,aAAaC,EAAKC,GAAMe,UAAS,SAAEC,GAC1CJ,EAAKmB,GAAKf,EAAKgB,QAInBxB,EAAAlB,UAAA2C,YAAA,SAAYC,IACPA,EAAkB,UAAKA,EAAc,QACnCjD,KAAK4B,qBACN5B,KAAK4B,oBAAoBsB,cAE3BlD,KAAK0B,sCA/CVyB,EAAAA,UAAS/B,KAAA,CAAC,CACTgC,SAAU,cACVC,SAAA,8gBAEAC,cAAeC,EAAAA,kBAAkBC,miDAN3B1D,uCASL2D,EAAAA,MAAKrC,KAAA,CAAC,0BACNqC,EAAAA,MAAKrC,KAAA,CAAC,WA6CTG,EAxDA,GCAAmC,EAAA,WAMA,SAAAA,KAS6B,2BAT5BC,EAAAA,SAAQvC,KAAA,CAAC,CACRwC,aAAc,CAACrC,GACfsC,QAAS,CACPC,EAAAA,iBACAC,EAAAA,cAGFC,QAAS,CAACzC,OAEiBmC,EAf7B","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WeatherService {\r\n  public apiURL = 'https://api.openweathermap.org/data/2.5/weather?q=';\r\n  public timeApiURL = 'http://api.geonames.org/timezoneJSON?formatted=true&';\r\n  public userdetails = '&username=kalyan11021980&style=full'\r\n  // lat=22.57&lng=88.35\r\n  public appID = '&appid=dc9b03f27b6d1b3ef9e1e36680b989ed';\r\n  constructor(\r\n    private _http: HttpClient\r\n  ) {\r\n\r\n   }\r\n\r\n  getWeather(city, unit): Observable<any> {\r\n     return this._http.get<any>(this.apiURL+city+this.appID+'&units='+unit).pipe(catchError(this.handlError));\r\n  }\r\n  getLocalTime(lat, long): Observable<any> {\r\n     return this._http.get<any>(this.timeApiURL+'lat='+lat+'&lng='+long+this.userdetails);\r\n  }\r\n  handlError(error) {\r\n    return throwError(error.error.message);\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, ViewEncapsulation, SimpleChange, SimpleChanges } from '@angular/core';\r\nimport {WeatherService } from './weather.service';\r\n\r\n@Component({\r\n  selector: 'app-weather',\r\n  templateUrl: './weather.component.html',\r\n  styleUrls: ['./weather.component.scss'],\r\n  encapsulation: ViewEncapsulation.ShadowDom\r\n})\r\nexport class WeatherComponent implements OnChanges {\r\n  @Input('location') location:string;\r\n  @Input('unit') unit:string;\r\n  public errText: string = '';\r\n  public weathersubscription;\r\n  public temp:number;\r\n  public desc: string;\r\n  public weatherico: string;\r\n  public country: string;\r\n  public city: string;\r\n  public dt: Date;\r\n  constructor(\r\n    public _ws: WeatherService\r\n  ) { }\r\n\r\n  renderWeather() {\r\n    this.weathersubscription = this._ws.getWeather(this.location, this.unit).subscribe((data) => {\r\n      this.errText = '';\r\n      this.temp = Math.round(data.main.temp);\r\n      this.desc = data.weather[0].description;\r\n      this.weatherico = 'http://openweathermap.org/img/w/'+data.weather[0].icon+'.png';\r\n      this.city = data.name;\r\n      this.country = data.sys.country;\r\n      this.getLocalTime(data.coord.lat, data.coord.lon);\r\n\r\n    }, error => {\r\n      this.errText = error;\r\n    })\r\n  }\r\n\r\n  getLocalTime(lat, long) {\r\n    this._ws.getLocalTime(lat, long).subscribe((data) => {\r\n      this.dt = data.time;\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if(changes['location'] || changes['unit']){\r\n      if(this.weathersubscription) {\r\n        this.weathersubscription.unsubscribe();\r\n      }\r\n      this.renderWeather();\r\n    }\r\n\r\n  }\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { WeatherComponent } from './weather.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common'\nimport { BrowserModule } from '@angular/platform-browser';\n\n@NgModule({\n  declarations: [WeatherComponent],\n  imports: [\n    HttpClientModule,\n    CommonModule\n\n  ],\n  exports: [WeatherComponent]\n})\nexport class WeatherModule { }\n"]}